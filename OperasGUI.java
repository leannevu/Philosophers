package FamousOperas;

import FamousMusicComposers.Composers;
import static FamousMusicComposers.ComposersGUI.insertionSort;
import FamousMusicComposers.PrintUtilities;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showConfirmDialog;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *<pre>
 * Class        OperasGUI.java
 * Project      FamousOperas
 * Description  A class representing the GUI used in a maintaining an operas 
 *              database obtained from a text file, Operas.txt with 5 fields:
 *              opera name, composer, year of first performance, city where
 *              first performed, synopsis, and YouTube link. Functionalities
 *              include: viewing of the data for selected opera, add, delete,
 *              edit, sort by year and by name, and search for specific opera.
 * File         CitiesGUI.java
 * Platform     jdk 1.8.0_214; NetBeans IDE 11.3; Windows 10
 * Course       CS 142, Edmonds Community College
 * Hours        15 hours
 * Date         1/25/2021 
 *
 * @author	<i>Leanne Vu</i>
 * @version 	%1% %2%
 * @see     	javax.swing.JFrame
 * @see         java.awt.Toolkit
 * @see         java.util.ArrayList
 *</pre>
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

public class OperasGUI extends javax.swing.JFrame {
    private String fileName = "src/FamousOperas/Operas.txt";
    private ArrayList<Operas> operas = new ArrayList<Operas>(); 

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~x~~~~~~~~
     *<pre>
     * Constructor     OperasGUI()-default constructor
     * Description     Create an instance of the OperasGUI class
     * Date            1/25/2021
     * History log  
     * @author	<i>Leanne Vu</i>
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public OperasGUI() {
        initComponents();
        this.getRootPane().setDefaultButton(addJButton);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(
                "src/FamousOperas/Splash2.jpg"));
        // center the application
        setLocationRelativeTo(null);
        //Read form an external text file Operas.txt and populate the
        //ArrayList of opera type
        readFromFile(fileName);
        displayOperas();
        int index = operasJList.getSelectedIndex();
          if (index >=0)
            showOperasData(operasJList.getSelectedIndex());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleJPanel = new javax.swing.JPanel();
        titleJLabel = new javax.swing.JLabel();
        logoJLabel1 = new javax.swing.JLabel();
        listJPanel = new javax.swing.JPanel();
        llistJScrollPane = new javax.swing.JScrollPane();
        operasJList = new javax.swing.JList();
        displayJPanel = new javax.swing.JPanel();
        nameJLabel = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        composerJLabel = new javax.swing.JLabel();
        composerJTextField = new javax.swing.JTextField();
        yearJLabel = new javax.swing.JLabel();
        yearJTextField = new javax.swing.JTextField();
        cityJLabel = new javax.swing.JLabel();
        cityJTextField = new javax.swing.JTextField();
        synopsisJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        synopsisJTextArea = new javax.swing.JTextArea();
        linkJLabel = new javax.swing.JLabel();
        linkJTextField = new javax.swing.JTextField();
        controlPanel = new javax.swing.JPanel();
        addJButton = new javax.swing.JButton();
        editJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        printJButton = new javax.swing.JButton();
        exitJButton = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        printOperaJMenuItem = new javax.swing.JMenuItem();
        printFormJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitJMenuItem = new javax.swing.JMenuItem();
        sortJMenu = new javax.swing.JMenu();
        nameJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        yearJRadioButtomMenuItem = new javax.swing.JRadioButtonMenuItem();
        databaseJMenu = new javax.swing.JMenu();
        addJMenuItem = new javax.swing.JMenuItem();
        deleteJMenuItem = new javax.swing.JMenuItem();
        editJMenuItem = new javax.swing.JMenuItem();
        searchJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Famous Opera Composers");
        setResizable(false);

        titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 30)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(51, 0, 0));
        titleJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleJLabel.setText("Famous Operas");

        logoJLabel1.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        logoJLabel1.setForeground(new java.awt.Color(51, 0, 0));
        logoJLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FamousOperas/Splash2.jpg"))); // NOI18N

        javax.swing.GroupLayout titleJPanelLayout = new javax.swing.GroupLayout(titleJPanel);
        titleJPanel.setLayout(titleJPanelLayout);
        titleJPanelLayout.setHorizontalGroup(
            titleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoJLabel1)
                .addGap(47, 47, 47)
                .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        titleJPanelLayout.setVerticalGroup(
            titleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titleJPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(titleJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logoJLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 5, Short.MAX_VALUE))
        );

        getContentPane().add(titleJPanel, java.awt.BorderLayout.NORTH);

        operasJList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        operasJList.setToolTipText("List of operas is given");
        operasJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                operasJListValueChanged(evt);
            }
        });
        llistJScrollPane.setViewportView(operasJList);

        javax.swing.GroupLayout listJPanelLayout = new javax.swing.GroupLayout(listJPanel);
        listJPanel.setLayout(listJPanelLayout);
        listJPanelLayout.setHorizontalGroup(
            listJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(llistJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
        );
        listJPanelLayout.setVerticalGroup(
            listJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(llistJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );

        getContentPane().add(listJPanel, java.awt.BorderLayout.WEST);

        displayJPanel.setLayout(new java.awt.GridLayout(6, 2, 5, 5));

        nameJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameJLabel.setText("Name of opera: ");
        displayJPanel.add(nameJLabel);

        nameJTextField.setEditable(false);
        nameJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nameJTextField.setToolTipText("The name of the opera will be given");
        displayJPanel.add(nameJTextField);

        composerJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        composerJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        composerJLabel.setText("Composer:");
        displayJPanel.add(composerJLabel);

        composerJTextField.setEditable(false);
        composerJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        composerJTextField.setToolTipText("Press Enter to update");
        displayJPanel.add(composerJTextField);

        yearJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        yearJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        yearJLabel.setText("Year first performed:");
        displayJPanel.add(yearJLabel);

        yearJTextField.setEditable(false);
        yearJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        yearJTextField.setToolTipText("Enter with no $ or commas and press Enter to update");
        displayJPanel.add(yearJTextField);

        cityJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cityJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cityJLabel.setText("City where first performed:");
        displayJPanel.add(cityJLabel);

        cityJTextField.setEditable(false);
        cityJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cityJTextField.setToolTipText("Enter without % sign and pres Enter to update");
        displayJPanel.add(cityJTextField);

        synopsisJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        synopsisJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        synopsisJLabel.setText("Synopsis:");
        displayJPanel.add(synopsisJLabel);

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        synopsisJTextArea.setEditable(false);
        synopsisJTextArea.setColumns(20);
        synopsisJTextArea.setLineWrap(true);
        synopsisJTextArea.setRows(1);
        synopsisJTextArea.setWrapStyleWord(true);
        synopsisJTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.N_RESIZE_CURSOR));
        jScrollPane1.setViewportView(synopsisJTextArea);

        displayJPanel.add(jScrollPane1);

        linkJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        linkJLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        linkJLabel.setText("Link to Youtube:");
        displayJPanel.add(linkJLabel);

        linkJTextField.setEditable(false);
        linkJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        linkJTextField.setToolTipText("Enter without % sign and press Enter to update");
        displayJPanel.add(linkJTextField);

        getContentPane().add(displayJPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        controlPanel.setMinimumSize(new java.awt.Dimension(299, 45));
        controlPanel.setLayout(new java.awt.GridLayout(1, 5, 5, 5));

        addJButton.setBackground(new java.awt.Color(204, 255, 204));
        addJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addJButton.setMnemonic('A');
        addJButton.setText("Add");
        addJButton.setToolTipText("Add new opera");
        addJButton.setMinimumSize(new java.awt.Dimension(57, 45));
        addJButton.setPreferredSize(new java.awt.Dimension(57, 35));
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(addJButton);

        editJButton.setBackground(new java.awt.Color(204, 255, 204));
        editJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        editJButton.setMnemonic('E');
        editJButton.setText("Edit");
        editJButton.setToolTipText("Edit opera. Press Enter in any of the JTextFields to confirm changes...");
        editJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(editJButton);

        deleteJButton.setBackground(new java.awt.Color(204, 255, 204));
        deleteJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteJButton.setMnemonic('D');
        deleteJButton.setText("Delete");
        deleteJButton.setToolTipText("Delete city");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(deleteJButton);

        printJButton.setBackground(new java.awt.Color(204, 255, 204));
        printJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        printJButton.setMnemonic('P');
        printJButton.setText("Print");
        printJButton.setToolTipText("Print individual city data");
        printJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(printJButton);

        exitJButton.setBackground(new java.awt.Color(204, 255, 204));
        exitJButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        exitJButton.setMnemonic('x');
        exitJButton.setText("Exit");
        exitJButton.setToolTipText("Exit application");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(exitJButton);

        getContentPane().add(controlPanel, java.awt.BorderLayout.SOUTH);

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        newJMenuItem.setMnemonic('N');
        newJMenuItem.setText("New");
        newJMenuItem.setToolTipText("New Opera DB");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);
        fileJMenu.add(jSeparator2);

        printOperaJMenuItem.setMnemonic('y');
        printOperaJMenuItem.setText("Print Opera");
        printOperaJMenuItem.setToolTipText("Print city data");
        printOperaJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printOperaJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printOperaJMenuItem);

        printFormJMenuItem.setMnemonic('P');
        printFormJMenuItem.setText("Print Form");
        printFormJMenuItem.setToolTipText("Print form as GUI");
        printFormJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printFormJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printFormJMenuItem);
        fileJMenu.add(jSeparator1);

        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        jMenuBar2.add(fileJMenu);

        sortJMenu.setMnemonic('S');
        sortJMenu.setText("Sort");

        nameJRadioButtonMenuItem.setMnemonic('n');
        nameJRadioButtonMenuItem.setSelected(true);
        nameJRadioButtonMenuItem.setText("By Name");
        nameJRadioButtonMenuItem.setToolTipText("Sort by name and display only name");
        nameJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        sortJMenu.add(nameJRadioButtonMenuItem);

        yearJRadioButtomMenuItem.setMnemonic('B');
        yearJRadioButtomMenuItem.setText("By Year");
        yearJRadioButtomMenuItem.setToolTipText("Sort by populatoin a nd display name and population");
        yearJRadioButtomMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearJRadioButtomMenuItemActionPerformed(evt);
            }
        });
        sortJMenu.add(yearJRadioButtomMenuItem);

        jMenuBar2.add(sortJMenu);

        databaseJMenu.setMnemonic('t');
        databaseJMenu.setText("DataBase Management");
        databaseJMenu.setToolTipText("More options");

        addJMenuItem.setMnemonic('A');
        addJMenuItem.setText("Add New Opera");
        addJMenuItem.setToolTipText("Add New Opera");
        addJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJMenuItemActionPerformed(evt);
            }
        });
        databaseJMenu.add(addJMenuItem);

        deleteJMenuItem.setMnemonic('D');
        deleteJMenuItem.setText("Delete Opera");
        deleteJMenuItem.setToolTipText("Delete Opera");
        deleteJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJMenuItemActionPerformed(evt);
            }
        });
        databaseJMenu.add(deleteJMenuItem);

        editJMenuItem.setMnemonic('E');
        editJMenuItem.setText("Edit Opera");
        editJMenuItem.setToolTipText("Edit Opera");
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        databaseJMenu.add(editJMenuItem);

        searchJMenuItem.setMnemonic('r');
        searchJMenuItem.setText("Search Opera");
        searchJMenuItem.setToolTipText("Search Opera");
        searchJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJMenuItemActionPerformed(evt);
            }
        });
        databaseJMenu.add(searchJMenuItem);

        jMenuBar2.add(databaseJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");

        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Access the About form");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        jMenuBar2.add(helpJMenu);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       readFromFile
     * Description  Reads operas from a text file that is comma delimited and
     *              creates an instance of the Operas class with the data read.
     *              Then the newly created opera is added to the operas database.
     *              Uses an object from the ReadFile class to read record.
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * @param       file String
     * @see         java.util.Scanner
     *</pre>   
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void readFromFile(String f){
        //clear previous arraylist
        operas.clear();
        //check if there is data
        try {
            //read while there is data
            Scanner input = new Scanner ( new File(f));
            String line = "";
            Operas inf = null ;
            StringTokenizer token = null;
            
            while (input.hasNextLine()){
                line = input.nextLine();
                inf = new Operas(); //create a inf 
                token = new StringTokenizer(line, "|");
                // create an array of String using split method
                while (token.hasMoreElements()){
                    
                    inf.setName(token.nextToken());
                    inf.setComposer(token.nextToken());
                    inf.setYears(Integer.parseInt(token.nextToken()));
                    inf.setCity (token.nextToken());
                    inf.setSynopsis(token.nextToken());
                    inf.setLink(token.nextToken());
           
//                String[] temp = line.split("|");
//                    inf.setName(temp[0]);
//                    inf.setComposition(temp[1]);
//                    //inf.setYears(Integer.parseInt(temp[2]));
//                    inf.setCity (temp[3]);
//                    inf.setSynopsis(temp[4]);
//                    inf.setLink(temp[5]);
//             line = input.nextLine();
           }
           //add information to the operas arrayList
                operas.add(inf);
            }
            input.close();
        } catch (FileNotFoundException e){
              JOptionPane.showMessageDialog(null, "File Does Not Exit",
                    "File Input Error", JOptionPane.WARNING_MESSAGE);
            //Bring up JFileChooser chooser to select file in current directory
            JFileChooser chooser = new JFileChooser("src/Operas");
            //Filter only txt files
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Txt Files", "txt");
            chooser.setFileFilter(filter);
            
            int choice = chooser.showOpenDialog(null);
            //return value if say yes or ok
            if(choice == JFileChooser.APPROVE_OPTION){
                File chosenFile = chooser.getSelectedFile();
                fileName = "src/Operas/"+ chosenFile.getName();
                readFromFile(fileName);
            } else{
                JOptionPane.showMessageDialog(null, "Unable to read file", 
                        "File Input Error", JOptionPane.WARNING_MESSAGE);
                System.exit(0);
            } //weird I/O error
                
        }
//        catch (IOException e){
//            JOptionPane.showMessageDialog(null, "Unable to read file", 
//                        "File Input Error", JOptionPane.WARNING_MESSAGE);
//            System.exit(0);
//        }  
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       displayOperas()
     * Description  Displays operas in JList sorted by level = 0 using 
     *              selection sort algorithm or last name = 1 using the 
     *              insertion sort algorithm.
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * @see         #selectionSort
     * @see         #insetionSort
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void displayOperas(){
        int position = operasJList.getSelectedIndex(); // get index of current operas
        String[] operasList = new String[operas.size()];
        if (yearJRadioButtomMenuItem.isSelected()){
            //sort by year -using selection sort in descending order and display name and year
            selectionSort(operas);
            for (int index = 0 ; index <operas.size(); index++){
                operasList[index] = operas.get(index).getName() + "," 
                    + operas.get(index).getYears();
             }
        }else {
                //sort by name only
                //sort by opera name- using insertion sort and display name only
                insertionSort(operas);
                for (int index = 0 ; index <operas.size(); index++){
                    operasList[index] = operas.get(index).getName();  
                }
        }
        operasJList.setListData(operasList); //populate Jlist with data
        if (position < 0)
            operasJList.setSelectedIndex(0);
        else 
            operasJList.setSelectedIndex(position);
            
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       insertionSort
     * Description  Sorts ArrayList cities in ascending order by name. Uses 
     *              the insertion sort algorithm which inserts operas name
     *              at correct position and shuffles everyone else below that
     *              position.
     * @param       cp ArrayList
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public static void insertionSort(ArrayList <Operas> cp){
        int i,j;
           for ( i = 0; i < cp.size(); i++){
               Operas temp = cp.get(i);
               j = i-1;
           while ( j >= 0 && cp.get(j).getName().compareToIgnoreCase(temp.getName()) > 0){
               cp.set(j+1, cp.get(j));
               j--;
           }
           cp.set(j+1,temp);
           }     
        }

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       selectionSort
     * Description  Sorts ArrayList operas in descending order by year. 
     *              Calls findsMaximum to find opera with most recent year in 
     *              each pass and swap to exchange operas when necessary.
     * @param       cp ArrayList
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/  
    public void selectionSort(ArrayList<Operas> cp){
        int max = 0;
        for (int i = 0; i < cp.size(); i++){
            max = findMax(cp,i);
            //swap ( cp, i , max)
            Operas temp = cp.get(i);
           
            cp.set(i, cp.get(max));
            cp.set(max, temp);
        }
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       findMaximum
     * Description  Called by selectionSort to find the index of the member 
     *              with the maximum year from a given index to the end 
     *              of the ArrayList. Index is from which to search for the max.
     * @author      <i>Leanne Vu</i>
     * @param       cp ArrayList
     * @param       i int
     * @return      max int
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public int findMax(ArrayList<Operas> cp, int i){
        int j, max = i;
        for (j = i+1; j <cp.size(); j++){
            if (cp.get(j).getYears()> cp.get(max).getYears())
                max =j;
        }
        return max;
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       showOperasData()
     * Description  Display information about selected opera
     * @parem       index int
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void showOperasData(int index){
        if (index >=0 && index < operas.size()){
            nameJTextField.setText(operas.get(index).getName());
            composerJTextField.setText(operas.get(index).getComposer());
            yearJTextField.setText(Integer.toString(operas.get(index).getYears()));
            cityJTextField.setText(operas.get(index).getCity());
            synopsisJTextArea.setText(operas.get(index).getSynopsis());
            
            linkJTextField.setText(operas.get(index).getLink());
            
            //Desktop.getDesktop().browse(uri.parse(operas.get(index).getLink())); need to parse into url and then make it a lin
        }
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       newJMenuItemActionPerformed()
     * Description  Show a JFileChooser with an OpenDialog to delect a 
     *              different operas database
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newJMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser("src/FamousOperas");
        //Filter only txt file
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Txt Files", "txt") ;
        chooser.setFileFilter(filter);
        int choice = chooser.showOpenDialog(null);
        if(choice == JFileChooser.APPROVE_OPTION){
        
        //Clear exiting citites ArrayList and Jlist
            operasJList.removeAll();
            File chosenFile = chooser.getSelectedFile();
            String file = "src/FamousOperas/" + chosenFile.getName();
        
        //need to update fileNAme to save chnages in corrct file-- cannot be final
            fileName = file;
           
            readFromFile(file);   
            displayOperas();
        } else {
            JOptionPane.showMessageDialog(null,"Unable to read file", "File input Error",
                    JOptionPane.WARNING_MESSAGE);
            }
    
    }//GEN-LAST:event_newJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method        exitJMenuItemActionPerformed()
     * Description   Call the exitJButtonActionPerformed event handler to exit
     * @param        evt ActionWvent
     * @see          java.awt.event.ActionEvent
     * @author       <i>Leanne Vu</i>
     * Date          1/25/2021
     *</pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        exitJButton.doClick();
    }//GEN-LAST:event_exitJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        aboutJMenuItemActionPerformed() 
    * Description   Event handler for aboutJMenuItem to show the About form
    * parem         evt ActionEvent
    * @author       <i>Leanne Vu</i>	
    * Date          1/25/2021
    *</pre>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        About myAbout= new About(this,false);
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       addJMenuItemActionPerformed()
     * Description  Event handler for addJMenuItem to invoke the addJButton.
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void addJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJMenuItemActionPerformed
        addJButton.doClick();
    }//GEN-LAST:event_addJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       addJButtonActionPerformed()
     * Description  Event handler for adding an opera by invoking the AddOpera
     *              form. No empty of duplicate opera is added. The new opera
     *              is added to the JList and saved in the Operas.txt file.
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/     
    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
              //add a new opera
        try {
            AddOpera add = new AddOpera(this,true);
            add.setVisible(true);
            
            //This modal dailog takes upon regaining focus
            Operas newComposers = add.getComposers();
            
            if (newComposers !=null && !operasExits(newComposers)){
                //add the new opera to the balance
                operas.add(add.getComposers());
                displayOperas();     //refresh GUI
                searchComposer(newComposers.getName()); //highlighted added opera
                //save new opera to a file
                saveComposers(fileName);
            } else {
                operasJList.setVisible(true);
                operasJList.setSelectedIndex(0);
            }
        
        }catch(NullPointerException nullex){
            JOptionPane.showMessageDialog(null,"Opera not added", "add opera error",
                    JOptionPane.WARNING_MESSAGE);
            operasJList.setVisible(true);
            operasJList.setSelectedIndex(0);
        }
    }//GEN-LAST:event_addJButtonActionPerformed
   
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       operasExists()
     * Description  Method invoked in addJButton event handler to verify that
     *              the opera that's being added exists
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private boolean operasExits(Operas name){
        boolean thereIsOne = false;
        for ( int index = 0 ; index < operas.size() && ! thereIsOne; index++){
            if (operas.get(index).equals(name))
                thereIsOne = true;
        }
        return thereIsOne;
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       editJButtonActionPerformed()
     * Description  Event handler for editing an opera by invoking the EditOperas
     *              form. No empty of duplicate opera is added. The edited opera
     *              is edited to the JList and saved in the Operas.txt file.
     * @parem       evt--ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void editJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJButtonActionPerformed
        //Edit Opera
         try{
            //get name of the selected operas
          String operasName = operasJList.getSelectedValue().toString();
          //remove year if edit mode is on sorted by name
          if (operasName.contains(","))
              operasName = operasName.substring(0, operasName.indexOf(','));
          //create a temp operas to populate fields of form
          Operas operasToEdit = new Operas(findOpera(operasName));
          int index = operasJList.getSelectedIndex();
          //pass operas info to EditOperas constructor and view Edit form
          EditOpera editedComposers = new EditOpera(operasToEdit);
          editedComposers.setVisible(true);
          
          //get editted opera and add to array List
          if (editedComposers.getComposers() != null){
              //remove old operas from ArrayList
              operas.remove(index);
              
              //add edited opera to ArrayLisr
              operas.add(editedComposers.getComposers());
              
              //save newCity list to file and display new operas in JList
              saveComposers(fileName);
              displayOperas();
             
          }
         
        }catch( NullPointerException nullex){
            JOptionPane.showMessageDialog(null,"City not Edit", "Edit Name error",
                    JOptionPane.WARNING_MESSAGE);
            operasJList.setVisible(true);
            operasJList.setSelectedIndex(0);
        }
         
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       findCity()
     * Description  Search for a opera by name and return the opera if found
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    }//GEN-LAST:event_editJButtonActionPerformed
    private Operas findOpera(String cpName){
        int index = -1;
        //make sure JList is sorted by name
        nameJRadioButtonMenuItem.doClick();
        for (int i = 0 ; i <operas.size(); i ++){
            if (cpName.equals(operas.get(i).getName()))
                index = i;
        }
        if ( index >= 0){
            operasJList.setSelectedIndex(index);
            return operas.get(index);
            
        }else 
            return null;
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       deleteJButtonItemActionPerformed()
     * Description  Event handler for deletedJButton to delete selected opera
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
  //delete selected city, di nothing on No_Option
      int index = operasJList.getSelectedIndex();
      String name = operas.get(index).getName();
        int result = showConfirmDialog(null, "Are you sure you wish to delete " 
                + name + " city?", " DELETE CITY", 
        JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
       
       if (result == JOptionPane.YES_OPTION){
           operas.remove(index);
           displayOperas();
           saveComposers(fileName);
       } 
    }//GEN-LAST:event_deleteJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printJButtonActionPerformed()
     * Description  Button for printJButtonActionPerformed to print
     *              the selected opera information
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJButtonActionPerformed
                /// Print selected city
        int index = operasJList.getSelectedIndex();
        JTextArea printCity = new JTextArea();
        if (index >= 0){
            try{
                Operas temp = new Operas(operas.get(index));
                String output = "Composers: " + temp.getName() + "\n" +
                        "Name of the famous composition : " + temp.getComposer() +"\n" +
                        "Year first perform  : " + temp.getYears()+ "\n" +
                        "City where first performed : " +temp.getCity() + "\n" + 
                        "Synopsis : " + temp.getSynopsis() + "\n" +
                        "Link Youtube: " + temp.getLink() + "\n";
                printCity.setText(output);
                System.out.println("Printed city: " + output);
                printCity.print();
            }catch(PrinterException ex){
            JOptionPane.showMessageDialog(null,"City not printed", "Print Error",
                    JOptionPane.WARNING_MESSAGE);
            }
        
        }
    }//GEN-LAST:event_printJButtonActionPerformed

   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        exitJButtonActionPerformed()
    * Description   Event handler to close the application
    * @param        evt ActionWvent
    * @see          java.awt.event.ActionEvent
    * @author       <i>Leanne Vu</i>
    * Date          1/25/2021
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       operasJListValueChanged()
     * Description  Event handler for operasJListValueChanged to update
     *              information on selected opera
     * @parem       evt ListSelectionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void operasJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_operasJListValueChanged
        int index = (operasJList.getSelectedIndex());
        if (index >= 0)
        showOperasData(index);
    }//GEN-LAST:event_operasJListValueChanged

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printFormJMenuItemActionPerformed()
     * Description  Event handler for printFormJMenuItemActionPerformed to print
     *              the form as a GUI
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printFormJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printFormJMenuItemActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printFormJMenuItemActionPerformed

     /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       deleteJMenuItemActionPerformed()
     * Description  Event handler for deleteJMenuItem to invoke the deleteJButton
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void deleteJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJMenuItemActionPerformed
        deleteJButton.doClick();
    }//GEN-LAST:event_deleteJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       editJMenuItemActionPerformed()
     * Description  Event handler for editJMenu to invoke the editJButton.
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJMenuItemActionPerformed
        editJButton.doClick();
    }//GEN-LAST:event_editJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       searchJMenuItemActionPerformed()
     * Description  Event handler for searchJMenuItem. It calls searchCity 
     *              method
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/21/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void searchJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJMenuItemActionPerformed
        String operasName = JOptionPane.showInputDialog ("Enter name of the composer: ");
        searchComposer(operasName);
    }//GEN-LAST:event_searchJMenuItemActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       printOperaJMenuItem1ActionPerformed()
     * Description  Event handler to print details of selected opera by invoking 
     *              print button
     * @parem       evt ActionEvent
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    private void printOperaJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printOperaJMenuItemActionPerformed
       printJButtonActionPerformed(evt);
    }//GEN-LAST:event_printOperaJMenuItemActionPerformed
   
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        byNameJRadioButtonMenuItemActionPerformed()
    * Description   This is the event handler for the nameJRadioButton
    * @param        evt ActionWvent
    * @see          java.awt.event.ActionEvent
     * Date         1/27/2021
     * History log  
     * @author	<i>Leanne Vu</i>  
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void nameJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameJRadioButtonMenuItemActionPerformed
      displayOperas();
    }//GEN-LAST:event_nameJRadioButtonMenuItemActionPerformed

       /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        byNameJRadioButtonMenuItemActionPerformed()
    * Description   This is the event handler for the yearJRadioButton
    * @param        evt ActionWvent
    * @see          java.awt.event.ActionEvent
     * Date         1/27/2021
     * History log  
     * @author	<i>Leanne Vu</i>  
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void yearJRadioButtomMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearJRadioButtomMenuItemActionPerformed
      displayOperas();
    }//GEN-LAST:event_yearJRadioButtomMenuItemActionPerformed

   
   
     /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>>
     * Method       searchCity()
     * Description  Search for a opera by name and highlight if found
     * @parem       cityName String
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void searchComposer(String name){
        if ((name != null) && (name.length() > 0)){
            //sort the JList opera by name
            nameJRadioButtonMenuItem.setSelected(true);
            displayOperas();
            
            //create a String array of opera names
            String[] operasArray = new String[operas.size()];
            for (int i = 0; i < operasArray.length; i++)
                operasArray[i] = operas.get(i).getName().toLowerCase();
            // Find index of opera
            int index = linearSearch(operasArray,name);
            if (index < 0){
                JOptionPane.showMessageDialog(null, " City" + name +
                        "not found ", " Search Result", JOptionPane.WARNING_MESSAGE);
                operasJList.setSelectedIndex(0);
            
            }else 
                operasJList.setSelectedIndex(index);
        }
    }
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       linearSearch()
     * Description  Event handler to search opera by name using the linear search
     *              algorithm and to display its index if found and -1 if not
     *              found
     * @return      index int
     * @param       cp String[]
     * @param       n String
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public int linearSearch (String[] cp, String n){
        int index = -1;
        boolean found = false;
        for (int i = 0 ; i < cp.length; i++){
            if (cp[i].toLowerCase().contains(n.toLowerCase())){
                index = i;
                found = true;
            }
        }
    return index;
    }
    

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *<pre>
     * Method       saveComposers()
     * Description  Write operas to a text file that is comma delimited
     * @param       file String
     * @author      <i>Leanne Vu</i>
     * Date         1/25/2021
     * </pre>
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public void saveComposers(String file){
        String limit = "|";
        try{
            FileWriter filePointer = new FileWriter(file,false);
            PrintWriter output = new PrintWriter(filePointer);
            
            for ( int index = 0; index < operas.size(); index ++){
                Operas tempComposers = operas.get(index);
                String line = tempComposers.getName() + limit + 
                        tempComposers.getComposer() + limit +
                        tempComposers.getYears()+ limit +
                        tempComposers.getCity() + limit +
                        tempComposers.getSynopsis() + limit +
                        tempComposers.getLink();
                //donot add na extra blank line at the end of the line
                if ( index == operas.size() - 1)
                    output.write(line);
                else 
                    output.write(line + "\n");
            }
                output.close();
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, "Composer not Saves", 
                    "Save Error", JOptionPane.WARNING_MESSAGE);
            operasJList.setVisible(true);
            operasJList.setSelectedIndex(0);
        }
    
    }
    /**
     * @param args the command line arguments
     */
    
   /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *<pre>
    * Method        main()
    * Description   Call the contructor to create an instance of the form
    * @param        args are the command line strings
    * @author       <i>Leanne Vu</i>
    * Date          1/25/2021
    *</pre>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OperasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OperasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OperasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OperasGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        Splash mySplash = new Splash(3000);
        mySplash.showSplash();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OperasGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JButton addJButton;
    private javax.swing.JMenuItem addJMenuItem;
    private javax.swing.JLabel cityJLabel;
    private javax.swing.JTextField cityJTextField;
    private javax.swing.JLabel composerJLabel;
    private javax.swing.JTextField composerJTextField;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JMenu databaseJMenu;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JMenuItem deleteJMenuItem;
    private javax.swing.JPanel displayJPanel;
    private javax.swing.JButton editJButton;
    private javax.swing.JMenuItem editJMenuItem;
    private javax.swing.JButton exitJButton;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel linkJLabel;
    private javax.swing.JTextField linkJTextField;
    private javax.swing.JPanel listJPanel;
    private javax.swing.JScrollPane llistJScrollPane;
    private javax.swing.JLabel logoJLabel1;
    private javax.swing.JLabel nameJLabel;
    private javax.swing.JRadioButtonMenuItem nameJRadioButtonMenuItem;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JList operasJList;
    private javax.swing.JMenuItem printFormJMenuItem;
    private javax.swing.JButton printJButton;
    private javax.swing.JMenuItem printOperaJMenuItem;
    private javax.swing.JMenuItem searchJMenuItem;
    private javax.swing.JMenu sortJMenu;
    private javax.swing.JLabel synopsisJLabel;
    private javax.swing.JTextArea synopsisJTextArea;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JPanel titleJPanel;
    private javax.swing.JLabel yearJLabel;
    private javax.swing.JRadioButtonMenuItem yearJRadioButtomMenuItem;
    private javax.swing.JTextField yearJTextField;
    // End of variables declaration//GEN-END:variables
}
